#!/usr/bin/env python3

import argparse
import snakemake 
import os
import sys 
import subprocess
from Bio import SeqIO
from pathlib import Path
import re

def main():
    parser = argparse.ArgumentParser(description='TESTING')
    parser.add_argument('--debug', default=True, action='store_false',
        help = "Verbose snakemake execution")
    parser.add_argument('--dag', default=False, action='store_true',
        help = "Display DAG and exit")
    parser.add_argument('--allowAmbiguous', default=False, action='store_true',
        help = "Toggle whether to exclude ambiguous bases in SNPs and insertions")
    parser.add_argument('--extension', metavar = '', type = str,
        help = "Suffix and extension for input files")
    parser.add_argument('--align', default=False, action='store_true',
        help = "Specify whether input fasta files should be aligned to NC_045512.2 reference genome using muscle.")
    parser.add_argument('--vcf', default=False, action='store_true',
        help = "Enter pipeline with VCF files in directory")
    parser.add_argument('--cutoff', metavar = '', type = int , default=50,
        help = "Percentage N cutoff for input sequences. Default 50")
    parser.add_argument('--split', default=False, action='store_true',
        help = "Toggle per sample VCF file output")
    parser.add_argument('--threads' , metavar='', type = int, default = 1,
        help = "Max number of threads for snakemake job execution.")
    parser.add_argument('--window' , metavar='', type = int, default = 2,
        help = "Maximum number of flanking N's around deletion, default 2")
    parser.add_argument('--mask-problem-sites', metavar = 'SE AB AM HA HH HO IC NA NS NL SS AD BR all', nargs='+', 
        help = "Filter problematic sides with these codes")
    parser.add_argument('input', metavar='input-directory', type=str,
        help='Input directory of alignments, consensus fasta sequences or VCF files.')
    parser.add_argument('output', metavar='output-directory', type=str,
        help='Destination dir for SPEAR annotated VCFs')
    args = parser.parse_args()

    SPEAR_PATH = os.environ.get('CONDA_PREFIX')
    print(SPEAR_PATH)
    #check if input is a directory or a file and then operate differently depending
    if args.extension == None:
        if args.align:
            extension = ".consensus.fa"
        elif args.vcf:
            extension = ".vcf"
        else:
            extension = ".muscle.aln"
    else:
        extension = args.extension

    #setting the sample list for input to snakemake. Filtering based on N percentage and ensuring inputs have correct number of sequences. 
    single_sample = False
    if os.path.isdir(args.input):
        input_samples = [(f.split(f'{extension}'))[0] for f in os.listdir(args.input) if f.endswith(extension)]
        if args.align: #HERE 
            if len(input_samples) == 0:
                print("No samples found")
                parser.print_help()
                sys.exit(1)
            passing_samples = []
            samples_fail_perc_n = 0
            samples_fail_count = 0
            for sample in input_samples:
                print(sample)
                count = 0
                sample_file = list(SeqIO.parse(f'{args.input}/{sample}{extension}', "fasta"))
                for record in sample_file:
                    record.seq = record.seq.upper()
                    count +=1
                    if len(record.seq) == 0:
                        perc_n = 100
                    else:
                        perc_n = (record.seq.count("N")/len(record.seq)) * 100 #factor indels in this count ? 
                if count > 1:
                    samples_fail_count += 1
                elif perc_n >= args.cutoff:
                    samples_fail_perc_n += 1   
                else:
                    Path(f'{args.output}/input_files').mkdir(parents=True, exist_ok=True)
                    sample_file[0].id = re.sub('[^a-zA-Z0-9]', '_', sample_file[0].id)
                    sample_file[0].name = re.sub('[^a-zA-Z0-9]', '_', sample_file[0].name)
                    sample_file[0].description = re.sub('[^a-zA-Z0-9]', '_', sample_file[0].description)
                    with open(f'{args.output}/input_files/{sample_file[0].id}{extension}', "w") as output_handle:
                        SeqIO.write(sample_file, output_handle, "fasta")
                    passing_samples.append(sample_file[0].id)
            print(f'''
                Input samples : {len(input_samples)}
                Passing samples : {len(passing_samples)}
                %N > {args.cutoff} : {samples_fail_perc_n}
                Incorrect format : {samples_fail_count}
                ''') 
        elif args.vcf:
            passing_samples = []
            for sample in input_samples:
                Path(f'{args.output}/input_files').mkdir(parents=True, exist_ok=True)
                sample_name = subprocess.run(['bcftools', 'query', '-l', f'{args.input}/{sample}{extension}'], stdout=subprocess.PIPE,).stdout.decode('utf-8').rstrip('\n')
                sample_name = re.sub('[^a-zA-Z0-9]]', '_', sample_name)
                #copyfile(f'{args.input}/{sample}{extension}', f'{args.output}/input_files/{sample_name}{extension}')
                with open(f'{args.output}/input_files/id.txt', "w") as id_file:
                    id_file.write(sample_name)
                with open(f'{args.output}/input_files/{sample_name}{extension}', "w") as outfile:
                    subprocess.run(['bcftools', 'reheader', '-s', f'{args.output}/input_files/id.txt',  f'{args.input}/{sample}{extension}'], stdout=outfile)
                passing_samples.append(sample_name)
            print(f'''
                Input samples : {len(passing_samples)}
                ''')             
        else:
            passing_samples = []
            samples_fail_perc_n = 0
            samples_fail_count = 0
            for sample in input_samples:
                count = 0
                sample_file = list(SeqIO.parse(f'{args.input}/{sample}{extension}', "fasta"))
                for record in sample_file:
                    count +=1
                    if count == 1:
                        reference = record.id #FIX THIS 
                        continue
                    elif len(record.seq) == 0:
                        perc_n = 100
                    else:
                        perc_n = (record.seq.count("N")/len(record.seq)) * 100
                if count != 2:
                    samples_fail_count += 1
                elif perc_n >= args.cutoff:
                    samples_fail_perc_n += 1
                else:
                    Path(f'{args.output}/input_files').mkdir(parents=True, exist_ok=True)
                    sample_file[1].id = re.sub('[^a-zA-Z0-9]', '_', sample_file[1].id)
                    sample_file[1].name = re.sub('[^a-zA-Z0-9]', '_', sample_file[1].name)
                    sample_file[1].description = re.sub('[^a-zA-Z0-9]', '_', sample_file[1].description)
                    with open(f'{args.output}/input_files/{sample_file[1].id}{extension}', "w") as output_handle:
                        SeqIO.write(sample_file, output_handle, "fasta")
                    passing_samples.append(sample_file[1].id)
            print(f'''
                Input samples : {len(input_samples)}
                Passing samples : {len(passing_samples)}
                %N > {args.cutoff} : {samples_fail_perc_n}
                Incorrect format : {samples_fail_count}
                ''') 
    elif os.path.isfile(args.input):
        single_sample = True
        input_sample = (Path(args.input).stem).split(".", 1)[0]
        if args.align: #HERE 
            passing_samples = []
            samples_fail_perc_n = 0
            samples_fail_count = 0
            count = 0
            sample_file = list(SeqIO.parse(f'{args.input}', "fasta"))
            for record in sample_file:
                count += 1
                if len(record.seq) == 0:
                    perc_n = 100
                else:
                    perc_n = (record.seq.count("N")/len(record.seq)) * 100 #factor indels in this count ? 
            if count > 1:
                samples_fail_count += 1
            elif perc_n >= args.cutoff:
                samples_fail_perc_n += 1   
            else:
                Path(f'{args.output}/input_files').mkdir(parents=True, exist_ok=True)
                sample_file[0].id = re.sub('[^a-zA-Z0-9]', '_', sample_file[0].id)
                sample_file[0].name = re.sub('[^a-zA-Z0-9]', '_', sample_file[0].name)
                sample_file[0].description = re.sub('[^a-zA-Z0-9]', '_', sample_file[0].description)
                with open(f'{args.output}/input_files/{sample_file[0].id}{extension}', "w") as output_handle:
                    SeqIO.write(sample_file, output_handle, "fasta")
                passing_samples = [sample_file[0].id]
            print(f'''
                Input samples : 1
                Passing samples : {len(passing_samples)}
                %N > {args.cutoff} : {samples_fail_perc_n}
                Incorrect format : {samples_fail_count}
                ''')
            if len(passing_samples) != 1:
                print("No samples to process, exiting.")
                sys.exit(1)
        elif args.vcf:
            Path(f'{args.output}/input_files').mkdir(parents=True, exist_ok=True)
            sample_name = subprocess.run(['bcftools', 'query', '-l', f'{args.input}'], stdout=subprocess.PIPE,).stdout.decode('utf-8').rstrip('\n')
            sample_name = re.sub('[^a-zA-Z0-9]', '_', sample_name)
            #copyfile(f'{args.input}/{sample}{extension}', f'{args.output}/input_files/{sample_name}{extension}')
            with open(f'{args.output}/input_files/id.txt', "w") as id_file:
                id_file.write(sample_name)
            with open(f'{args.output}/input_files/{sample_name}{extension}', "w") as outfile:
                subprocess.run(['bcftools', 'reheader', '-s', f'{args.output}/input_files/id.txt',  f'{args.input}'], stdout=outfile)
            passing_samples = [sample_name]
            print(f'''
                Input samples : {len(passing_samples)}
                ''')             
        else:
            passing_samples = []
            samples_fail_perc_n = 0
            samples_fail_count = 0
            count = 0
            sample_file = list(SeqIO.parse(f'{args.input}', "fasta"))
            for record in sample_file:
                count +=1
                if record.id == "NC_045512.2": #FIX THIS 
                    continue
                elif len(record.seq) == 0:
                    perc_n = 100
                else:
                    perc_n = (record.seq.count("N")/len(record.seq)) * 100
            if count != 2:
                samples_fail_count += 1
            elif perc_n >= float(args.cutoff):
                samples_fail_perc_n += 1
            else:
                Path(f'{args.output}/input_files').mkdir(parents=True, exist_ok=True)
                sample_file[1].id = re.sub('[^a-zA-Z0-9]', '_', sample_file[1].id)
                sample_file[1].name = re.sub('[^a-zA-Z0-9]', '_', sample_file[1].name)
                sample_file[1].description = re.sub('[^a-zA-Z0-9]', '_', sample_file[1].description)
                with open(f'{args.output}/input_files/{sample_file[1].id}{extension}', "w") as output_handle:
                    SeqIO.write(sample_file, output_handle, "fasta")
                passing_samples = [sample_file[1].id]
            print(f'''
                Input samples : 1
                Passing samples : {len(passing_samples)}
                %N > {args.cutoff} : {samples_fail_perc_n}
                Incorrect format : {samples_fail_count}
                ''')
            if len(passing_samples) != 1:
                print("No samples to process, exiting.")
                sys.exit(1)
    else:  
        print("Input is not a file or directory" )
        parser.print_help()
        sys.exit(1)

    
    if args.allowAmbiguous:
        exclude = ""
        allow_ambiguous = "--allowAmbiguous"
    else:
        exclude = "-ambiguousToN"
        allow_ambiguous = ""
    problem_sites = args.mask_problem_sites

    problem_exc = {
        "SE" : "seq_end", 
        "AB" : "ambiguous", 
        "AM" : "amended",
        "HA": "highly_ambiguous", 
        "HH" : "highly_homoplasic", 
        "HO" : "homoplasic", 
        "IC" : "interspecific_contamination", 
        "NA" : "nanopore_adapter", 
        "NS": "narrow_src", 
        "NL": "neighbour_linked" , 
        "SS": "single_src", 
        "AD": "amplicon_drop_or_primer_artefact", 
        "BR": "back_to_ref"}

    exclusion_statements = []
    if problem_sites == None:
        filter_snps = False
        filter_statement = ""
    else:
        filter_snps = True
        if "all" in problem_sites:
            filter_statement = f"problem_filter = 'mask'"
        else:
            for site in problem_sites:
                try:
                    problem_exc[site]
                    statement = f" problem_exc =~ '{problem_exc[site]}' "
                    exclusion_statements.append(statement)

                except KeyError:
                    print("Masking parameter not recognised")
                    parser.print_help()
                    sys.exit(1)
            exclusions = "|".join(exclusion_statements)
            filter_statement = f"problem_filter = 'mask' & ({exclusions})"
    
    indir = f'{args.output}/input_files'

    if single_sample: 
        snakefile = f'{SPEAR_PATH}/bin/spear_single.smk'
    else:
        snakefile = f'{SPEAR_PATH}/bin/spear_multi.smk'

    config = {
        "input_dir" : indir,
        "samples" : passing_samples, 
        "output_dir" : args.output,
        "data_dir" : f'{SPEAR_PATH}/data',
        "align" : args.align,
        "exclude_ambiguous" : exclude,
        "reference_sequence" : f'{SPEAR_PATH}/data/SARS-CoV-2.reference.fasta',
        "filter" : filter_snps,
        "filter_params" : filter_statement,
        "split_vcfs": args.split,
        "del_window" : args.window,
        "extension" : extension,
        "vcf" : args.vcf,
        "single_sample" : single_sample,
        "allow_ambiguous" : allow_ambiguous}

    status = snakemake.snakemake(
                snakefile, 
                printshellcmds=False,
                config=config, 
                quiet= args.debug,
                forceall = False, 
                printdag = args.dag, 
                cores = args.threads,
                printreason = False)

    if status:
       return 0
    return 1


if __name__ == "__main__":
    main()